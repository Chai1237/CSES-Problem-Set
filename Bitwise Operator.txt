Bitwise operator 
& - AND  = (a & b)_base_i == a_base_i*b_base_i
| - OR   = (a|b)_base_i == a_base_i + b_base_i - (a_base_i*b_base_i)
^ - XOR  = (a^b)_base_i == (a_base_i + b_base_i)mod 2
~ - NOT  = ~a_base_i == 1 - a_base_i
<< - Left Shift = a<<n == a*(2**n)  0 1 0 0 0 -> 0 1 0 0 0 0
>> - Right Shift = a>>n == a//(2**n) 0 1 0 0 0 -> 0 1 0 0
>>> - Logical


1 4 6 4 1                   2 - 2
0 3 5 3 0   1               3 - 3
0 2 4 2 0   2               4 - 6
0 2 3 1 0   3               5 - 10
0 1 2 1 0   4               6 - 20
0 1 1 0 0   5               7 - 35
0 0 0 0 0   6               8 - 70
                            9 - 126
1 3 3 1                     10 - 252
0 2 2 0     1
0 1 1 0     2
0 0 0 0     3